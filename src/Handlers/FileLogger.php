<?php

namespace RDM\StackLogger\Handlers;

use RDM\StackLogger\Interfaces\FileLoggerInterface;
use Google\Cloud\Logging\LoggingClient;
use Monolog\Handler\PsrHandler;
use Monolog\Handler\StreamHandler;
use Monolog\Logger;
use Monolog\Logger as Monolog;
use Monolog\Utils;
use Psr\Log\LoggerInterface;

/**
 * laravel - Creating Monolog Handler Channels
 * @see https://laravel.com/docs/8.x/logging#creating-monolog-handler-channels
 *
 */
class FileLogger extends StreamHandler
{


    /**
     * @param string          $default_path Default path of the log file
     * @param int|null        $permission   The log file's permissions
     * @param bool            $locking      Attempt to lock the log file before writing to it
     * @param LoggerInterface $logger       The underlying PSR-3 compliant logger to which messages will be proxied
     * @param string|int      $level        The minimum logging level at which this handler will be triggered
     * @param bool            $bubble       Whether the messages that are handled can bubble up the stack or not
     */
    public function __construct(string $default_path, LoggerInterface $logger, $level = Logger::DEBUG, bool $bubble = true, ?int $permission = null, bool $locking = false)
    {
        parent::__construct($default_path, $level, $bubble,$permission, $locking);
    }

    /**
     * {@inheritdoc}
     */
    public function handle(array $record): bool
    {

        return parent::handle($record); // TODO: Change the autogenerated stub
    }


    /**
     * 設置檔案路徑
     *
     * @param string $path
     *
     * @return FileLogger
     */
    public function setPath(string $path)
    {
        $this->close();     // 關閉 stream
        $this->url = Utils::canonicalizePath($path); // 重新設置路徑
        return $this;
    }

    /**
     * 取得檔案路徑
     * @return string|null
     */
    public function getPath()
    {
        return $this->getUrl();
    }

    /**
     * Clear file content
     */
    public function clearFile()
    {
        if (is_string($this->url) && is_file($this->url)) {
            $stream = fopen($this->url, 'r+');
            if (flock($stream, LOCK_EX)) {      // acquire lock
                ftruncate($stream, 0);              // truncate file
                flock($stream, LOCK_UN);        // release the lock
            }
            @fclose($stream);
        }
    }

    /**
     * Delete log file
     */
    public function deleteFile()
    {
        if (is_string($this->url) && is_file($this->url)) {
            unlink($this->url);
        }
    }




}
